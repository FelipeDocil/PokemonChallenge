/**
    This code is autogenerated using Capriccio 1.1.0 - https://github.com/shibapm/capriccio
    Implement the missing code in a extension, i.e.

    ```
    extension XCTestCase {
        func step<step name>() {}
    }
    ```

    DO NOT EDIT
*/
import XCTest

/**
Feature:
    Pokemon list screen
*/

class PokemonListScreenFeatureTest: XCTestCase {
    override func setUp() {
        super.setUp()
        
        continueAfterFailure = false
    }
    
    override func tearDown() {
        super.tearDown()
    }
      
    func testScenario_UserCanSeeTheListOfPokemon_AvailableAndCanAndHas() {
        launchScenarioUserCanSeeTheListOfPokemon(with: "AvailableAndCanAndHas")
        stepUserIsOnThePokemonListScreen()
        stepUserNetworkAndPersistentItensAre(availableOrNot: "available", hasOrNot: "has")
        stepUserSeeTheList(canOrNot: "can")
    } 
    func testScenario_UserCanSeeTheListOfPokemon_NotAvailableAndCanAndHas() {
        launchScenarioUserCanSeeTheListOfPokemon(with: "NotAvailableAndCanAndHas")
        stepUserIsOnThePokemonListScreen()
        stepUserNetworkAndPersistentItensAre(availableOrNot: "not available", hasOrNot: "has")
        stepUserSeeTheList(canOrNot: "can")
    } 
    func testScenario_UserCanSeeTheListOfPokemon_AvailableAndCanAndHasNot() {
        launchScenarioUserCanSeeTheListOfPokemon(with: "AvailableAndCanAndHasNot")
        stepUserIsOnThePokemonListScreen()
        stepUserNetworkAndPersistentItensAre(availableOrNot: "available", hasOrNot: "has not")
        stepUserSeeTheList(canOrNot: "can")
    } 
    func testScenario_UserCanSeeTheListOfPokemon_NotAvailableAndCannotAndHasNot() {
        launchScenarioUserCanSeeTheListOfPokemon(with: "NotAvailableAndCannotAndHasNot")
        stepUserIsOnThePokemonListScreen()
        stepUserNetworkAndPersistentItensAre(availableOrNot: "not available", hasOrNot: "has not")
        stepUserSeeTheList(canOrNot: "cannot")
    }    
    func testScenario_UserCanSeeAShinyPokemon() {
        launchScenarioUserCanSeeAShinyPokemon()
        stepUserIsOnThePokemonListScreen()
        stepUserClicksOnTheSwitch()
        stepUserCanSeeAShinyVersionOfThatPokemon()
    }  
    func testScenario_UserCanScrollToTheEndToFetchNextPage() {
        launchScenarioUserCanScrollToTheEndToFetchNextPage()
        stepUserIsOnThePokemonListScreen()
        stepUserScrollToTheEndOfThePage()
        stepUserCanSeeTheNextPage()
    }  
    func testScenario_UserCanSeeAPokemonDetail() {
        launchScenarioUserCanSeeAPokemonDetail()
        stepUserIsOnThePokemonListScreen()
        stepUserClicksOnAPokemonOnTheList()
        stepUserIsOnThePokemonDetailScreen()
    } 
}
